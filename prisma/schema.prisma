generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/// SciolyFF

model Result {
  duosmiumId                 String                     @id
  logo                       String
  color                      String
  createdAt                  DateTime                   @default(now())
  updatedAt                  DateTime                   @updatedAt
  events                     Event[]
  histogram                  Histogram?
  penalties                  Penalty[]
  placings                   Placing[]
  teams                      Team[]
  tournament                 Tournament?
  tracks                     Track[]
  userResultPolicies         UserResultPolicy[]
  organizationResultPolicies OrganizationResultPolicy[]

  @@index([duosmiumId])
}

model Tournament {
  resultDuosmiumId String @id
  data             Json
  result           Result @relation(fields: [resultDuosmiumId], references: [duosmiumId], onDelete: Cascade)

  @@index([resultDuosmiumId])
}

model Team {
  number           Int
  resultDuosmiumId String
  data             Json
  penalties        Penalty?
  placings         Placing[]
  result           Result    @relation(fields: [resultDuosmiumId], references: [duosmiumId], onDelete: Cascade)

  @@id([resultDuosmiumId, number])
  @@index([resultDuosmiumId, number])
}

model Event {
  name             String
  resultDuosmiumId String
  data             Json
  result           Result    @relation(fields: [resultDuosmiumId], references: [duosmiumId], onDelete: Cascade)
  Placing          Placing[]

  @@id([resultDuosmiumId, name])
  @@index([resultDuosmiumId, name])
}

model Track {
  name             String
  resultDuosmiumId String
  data             Json
  result           Result @relation(fields: [resultDuosmiumId], references: [duosmiumId], onDelete: Cascade)

  @@id([resultDuosmiumId, name])
  @@index([resultDuosmiumId, name])
}

model Placing {
  eventName        String
  teamNumber       Int
  resultDuosmiumId String
  data             Json
  event            Event  @relation(fields: [resultDuosmiumId, eventName], references: [resultDuosmiumId, name], onDelete: Cascade)
  result           Result @relation(fields: [resultDuosmiumId], references: [duosmiumId], onDelete: Cascade)
  team             Team   @relation(fields: [resultDuosmiumId, teamNumber], references: [resultDuosmiumId, number], onDelete: Cascade)

  @@id([resultDuosmiumId, eventName, teamNumber])
  @@index([resultDuosmiumId, eventName, teamNumber])
}

model Penalty {
  teamNumber       Int
  resultDuosmiumId String
  data             Json
  result           Result @relation(fields: [resultDuosmiumId], references: [duosmiumId], onDelete: Cascade)
  team             Team   @relation(fields: [resultDuosmiumId, teamNumber], references: [resultDuosmiumId, number], onDelete: Cascade)

  @@id([resultDuosmiumId, teamNumber])
  @@index([resultDuosmiumId, teamNumber])
}

model Histogram {
  resultDuosmiumId String @unique
  data             Json
  result           Result @relation(fields: [resultDuosmiumId], references: [duosmiumId], onDelete: Cascade)

  @@id([resultDuosmiumId])
}

/// Fun stuff that I'd like to implement in the future

model Location {
  name    String
  city    String @default("")
  state   String
  country String @default("United States")

  @@id([name, city, state, country])
  @@index([name, city, state, country])
}

/// Auth

model Membership {
  userId         String       @db.Uuid
  organizationId String       @db.Uuid
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([userId, organizationId])
  @@index([userId, organizationId])
}

model Organization {
  id                         String                     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  orgName                    String                     @unique
  name                       String
  users                      Membership[]
  organizationResultPolicies OrganizationResultPolicy[]
  userOrganizationPolicies   UserOrganizationPolicy[]
  createdAt                  DateTime                   @default(now())
  updatedAt                  DateTime                   @updatedAt

  @@index([orgName])
}

model UserResultPolicy {
  id                     String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId                 String   @db.Uuid
  results                Result[]
  resultDuosmiumIdRegExp String
  create                 Boolean  @default(false)
  read                   Boolean  @default(false)
  update                 Boolean  @default(false)
  delete                 Boolean  @default(false)
  createApproval         Boolean  @default(false)
  updateApproval         Boolean  @default(false)
  deleteApproval         Boolean  @default(false)
  approve                Boolean  @default(false)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  @@unique([userId, resultDuosmiumIdRegExp])
  @@index([userId, resultDuosmiumIdRegExp])
}

model OrganizationResultPolicy {
  id                     String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organization           Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId         String       @db.Uuid
  results                Result[]
  resultDuosmiumIdRegExp String
  create                 Boolean      @default(false)
  read                   Boolean      @default(false)
  update                 Boolean      @default(false)
  delete                 Boolean      @default(false)
  createApproval         Boolean      @default(false)
  updateApproval         Boolean      @default(false)
  deleteApproval         Boolean      @default(false)
  approve                Boolean      @default(false)
  createdAt              DateTime     @default(now())
  updatedAt              DateTime     @updatedAt

  @@unique([organizationId, resultDuosmiumIdRegExp])
  @@index([organizationId, resultDuosmiumIdRegExp])
}

model UserOrganizationPolicy {
  id             Int          @id @default(autoincrement())
  userId         String       @db.Uuid
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String       @db.Uuid
  addMembers     Boolean      @default(false)
  removeMembers  Boolean      @default(false)
  delete         Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([userId, organizationId])
  @@index([userId, organizationId])
}
