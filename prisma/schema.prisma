generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema", "postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
  extensions = [uuid_ossp(map: "uuid-ossp", schema: "extensions")]
  schemas    = ["public"]
}

/// SciolyFF

model Result {
  id                         Int                        @id @default(autoincrement())
  duosmiumId                 String                     @unique
  logo                       String
  color                      String
  createdAt                  DateTime                   @default(now())
  updatedAt                  DateTime                   @updatedAt
  events                     Event[]
  histogram                  Histogram?
  penalties                  Penalty[]
  placings                   Placing[]
  teams                      Team[]
  tournament                 Tournament?
  tracks                     Track[]
  userResultPolicies         UserResultPolicy[]
  organizationResultPolicies OrganizationResultPolicy[]

  @@index([duosmiumId])
  @@schema("public")
}

model Tournament {
  id               Int    @id @default(autoincrement())
  resultDuosmiumId String @unique
  data             Json
  result           Result @relation(fields: [resultDuosmiumId], references: [duosmiumId], onDelete: Cascade)

  @@index([resultDuosmiumId])
  @@schema("public")
}

model Team {
  id               Int       @id @default(autoincrement())
  number           Int
  resultDuosmiumId String
  data             Json
  penalties        Penalty?
  placings         Placing[]
  result           Result    @relation(fields: [resultDuosmiumId], references: [duosmiumId], onDelete: Cascade)

  @@unique([resultDuosmiumId, number])
  @@index([resultDuosmiumId, number])
  @@schema("public")
}

model Event {
  id               Int       @id @default(autoincrement())
  name             String
  resultDuosmiumId String
  data             Json
  result           Result    @relation(fields: [resultDuosmiumId], references: [duosmiumId], onDelete: Cascade)
  Placing          Placing[]

  @@unique([resultDuosmiumId, name])
  @@index([resultDuosmiumId, name])
  @@schema("public")
}

model Track {
  id               Int    @id @default(autoincrement())
  name             String
  resultDuosmiumId String
  data             Json
  result           Result @relation(fields: [resultDuosmiumId], references: [duosmiumId], onDelete: Cascade)

  @@unique([resultDuosmiumId, name])
  @@index([resultDuosmiumId, name])
  @@schema("public")
}

model Placing {
  id               Int    @id @default(autoincrement())
  eventName        String
  teamNumber       Int
  resultDuosmiumId String
  data             Json
  event            Event  @relation(fields: [resultDuosmiumId, eventName], references: [resultDuosmiumId, name], onDelete: Cascade)
  result           Result @relation(fields: [resultDuosmiumId], references: [duosmiumId], onDelete: Cascade)
  team             Team   @relation(fields: [resultDuosmiumId, teamNumber], references: [resultDuosmiumId, number], onDelete: Cascade)

  @@unique([resultDuosmiumId, eventName, teamNumber])
  @@index([resultDuosmiumId, eventName, teamNumber])
  @@schema("public")
}

model Penalty {
  id               Int    @id @default(autoincrement())
  teamNumber       Int
  resultDuosmiumId String
  data             Json
  result           Result @relation(fields: [resultDuosmiumId], references: [duosmiumId], onDelete: Cascade)
  team             Team   @relation(fields: [resultDuosmiumId, teamNumber], references: [resultDuosmiumId, number], onDelete: Cascade)

  @@unique([resultDuosmiumId, teamNumber])
  @@index([resultDuosmiumId, teamNumber])
  @@schema("public")
}

model Histogram {
  id               Int    @id @default(autoincrement())
  resultDuosmiumId String @unique
  data             Json
  result           Result @relation(fields: [resultDuosmiumId], references: [duosmiumId], onDelete: Cascade)

  @@index([resultDuosmiumId])
  @@schema("public")
}

/// Fun stuff that I'd like to implement in the future

model Location {
  id      Int    @id @default(autoincrement())
  name    String
  city    String @default("")
  state   String
  country String @default("United States")

  @@unique([name, city, state, country])
  @@index([name, city, state, country])
  @@schema("public")
}

/// Auth

model User {
  id                       String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username                 String                   @unique
  organizations            Organization[]
  userResultPolicies       UserResultPolicy[]
  userOrganizationPolicies UserOrganizationPolicy[]

  @@index([username])
  @@schema("public")
}

model Organization {
  id                         Int                        @id @default(autoincrement())
  orgName                    String                     @unique
  name                       String
  users                      User[]
  organizationResultPolicies OrganizationResultPolicy[]
  userOrganizationPolicies   UserOrganizationPolicy[]

  @@index([orgName])
  @@schema("public")
}

model UserResultPolicy {
  id                     Int      @id @default(autoincrement())
  user                   User     @relation(fields: [username], references: [username], onDelete: Cascade)
  username               String
  results                Result[]
  resultDuosmiumIdRegExp String
  create                 Boolean  @default(false)
  read                   Boolean  @default(false)
  update                 Boolean  @default(false)
  delete                 Boolean  @default(false)

  @@unique([username, resultDuosmiumIdRegExp])
  @@index([username, resultDuosmiumIdRegExp])
  @@schema("public")
}

model OrganizationResultPolicy {
  id                     Int          @id @default(autoincrement())
  organization           Organization @relation(fields: [orgName], references: [orgName], onDelete: Cascade)
  orgName                String
  results                Result[]
  resultDuosmiumIdRegExp String
  create                 Boolean      @default(false)
  read                   Boolean      @default(false)
  update                 Boolean      @default(false)
  delete                 Boolean      @default(false)

  @@unique([orgName, resultDuosmiumIdRegExp])
  @@index([orgName, resultDuosmiumIdRegExp])
  @@schema("public")
}

model UserOrganizationPolicy {
  id            Int          @id @default(autoincrement())
  user          User         @relation(fields: [username], references: [username], onDelete: Cascade)
  username      String
  organization  Organization @relation(fields: [orgName], references: [orgName], onDelete: Cascade)
  orgName       String
  addMembers    Boolean      @default(false)
  removeMembers Boolean      @default(false)
  delete        Boolean      @default(false)

  @@unique([username, orgName])
  @@index([username, orgName])
  @@schema("public")
}
