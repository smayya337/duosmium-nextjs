generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/// SciolyFF

model Result {
  duosmiumId      String      @id
  logo            String
  color           String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  events          Event[]
  histogram       Histogram?
  penalties       Penalty[]
  placings        Placing[]
  teams           Team[]
  tournament      Tournament?
  tracks          Track[]
  official        Boolean     @default(false)
  preliminary     Boolean     @default(false)
  title           String
  fullTitle       String
  shortTitle      String
  fullShortTitle  String
  date            String
  locationName    String
  locationCity    String      @default("")
  locationState   String
  locationCountry String      @default("United States")
  location        Location    @relation(fields: [locationName, locationCity, locationState, locationCountry], references: [name, city, state, country])

  @@index([duosmiumId])
}

model Tournament {
  resultDuosmiumId String @id
  data             Json
  result           Result @relation(fields: [resultDuosmiumId], references: [duosmiumId], onDelete: Cascade)

  @@index([resultDuosmiumId])
}

model Team {
  number           Int
  resultDuosmiumId String
  data             Json
  penalties        Penalty?
  placings         Placing[]
  result           Result    @relation(fields: [resultDuosmiumId], references: [duosmiumId], onDelete: Cascade)
  name             String
  city             String    @default("")
  state            String
  country          String    @default("United States")
  location         Location  @relation(fields: [name, city, state, country], references: [name, city, state, country], onDelete: Restrict)

  @@id([resultDuosmiumId, number])
  @@index([resultDuosmiumId, number])
}

model Event {
  name             String
  resultDuosmiumId String
  data             Json
  result           Result    @relation(fields: [resultDuosmiumId], references: [duosmiumId], onDelete: Cascade)
  placings         Placing[]

  @@id([resultDuosmiumId, name])
  @@index([resultDuosmiumId, name])
}

model Track {
  name             String
  resultDuosmiumId String
  data             Json
  result           Result @relation(fields: [resultDuosmiumId], references: [duosmiumId], onDelete: Cascade)

  @@id([resultDuosmiumId, name])
  @@index([resultDuosmiumId, name])
}

model Placing {
  eventName        String
  teamNumber       Int
  resultDuosmiumId String
  data             Json
  event            Event  @relation(fields: [resultDuosmiumId, eventName], references: [resultDuosmiumId, name], onDelete: Cascade)
  result           Result @relation(fields: [resultDuosmiumId], references: [duosmiumId], onDelete: Cascade)
  team             Team   @relation(fields: [resultDuosmiumId, teamNumber], references: [resultDuosmiumId, number], onDelete: Cascade)

  @@id([resultDuosmiumId, eventName, teamNumber])
  @@index([resultDuosmiumId, eventName, teamNumber])
}

model Penalty {
  teamNumber       Int
  resultDuosmiumId String
  data             Json
  result           Result @relation(fields: [resultDuosmiumId], references: [duosmiumId], onDelete: Cascade)
  team             Team   @relation(fields: [resultDuosmiumId, teamNumber], references: [resultDuosmiumId, number], onDelete: Cascade)

  @@id([resultDuosmiumId, teamNumber])
  @@index([resultDuosmiumId, teamNumber])
}

model Histogram {
  resultDuosmiumId String @unique
  data             Json
  result           Result @relation(fields: [resultDuosmiumId], references: [duosmiumId], onDelete: Cascade)

  @@id([resultDuosmiumId])
}

model Location {
  name    String
  city    String   @default("")
  state   String
  country String   @default("United States")
  teams   Team[]
  results Result[]

  @@id([name, city, state, country])
  @@index([name, city, state, country])
}
